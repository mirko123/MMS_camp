1. Имплементирайте "пестелив" булев масив (побитов) в последователност от unsigned int с примитиви
	void clear(unsigned int *, int N);
	int get(const unsigned int *, int N, int bit); /* -1 -> range error */
	int set(unsigned int *, int N, int bit, int boolean); /* -1 -> range error */
като е известно, че unsingned int * съдържа достатъчно място, за да съхрани N бита. Функциите get и set да проверяват за range.
2. Същото, като поинтъра е unsigned char *
3. Като се използват написаните примитиви от (2), да се напише растерен дисплей от MxN пиксела, като
	0 == black
	1 == white
и примитивите са
	int getpix(const unsigned char *, int M, int N, int X, int Y); /* -1 -> range error */
	int setpix(unsigned char *, int M, int N, int X, int Y, int colour); /* -1 -> range error */
	void display(const unsigned char *, int M, int N); /* prints M rows by N columns, '#' == white, '.' == black */
Дисплейят да е така координиран:
(0, 0)		...	(0, N-1)
(1, 0)		...	(1, N-1)
.			.
.			.
.			.
(M-1, 0) 	...	(M-1, N-1)
4. Като се използват написаните примитиви от (3) и дисплей 8x8 пиксела, да се алокира динамично нужната памет в хиипа, да се инициализира с 0 и да се нарисува алгоритмично и display-не следната икона:
########
##....##
#.#..#.#
#..##..#
#..##..#
#.#..#.#
##....##
########
5. Ако файлът "image" съдържа валидна растерна информация във формат
	|<4 bytes, int, M>|<4 bytes, int, N>|<MxN bits pixel data>|,
да се зареди в примивите от (3) и (4) и да се display-не. Файлът винаги ще е с валидни данни.

Желателно е имплементациите от (1), (2) и (3) да вървят със съответните хедер файлове, така че да се ползват директно в (4) и (5) без копиране на код!
